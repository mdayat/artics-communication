// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (id, email, password, name, role)
VALUES ($1, $2, $3, $4, $5) RETURNING id, email, password, name, role, created_at
`

type InsertUserParams struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Name     string      `json:"name"`
	Role     string      `json:"role"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const selectAvailableMeetingRooms = `-- name: SelectAvailableMeetingRooms :many
SELECT id, name, created_at FROM meeting_room mr
WHERE EXISTS (
    SELECT 1
    FROM time_slot ts
    WHERE ts.meeting_room_id = mr.id
    AND NOT EXISTS (
        SELECT 1 
        FROM reservation r 
        WHERE r.meeting_room_id = mr.id 
        AND r.time_slot_id = ts.id 
        AND r.status != 'canceled'
    )
)
`

func (q *Queries) SelectAvailableMeetingRooms(ctx context.Context) ([]MeetingRoom, error) {
	rows, err := q.db.Query(ctx, selectAvailableMeetingRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MeetingRoom
	for rows.Next() {
		var i MeetingRoom
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectMeetingRooms = `-- name: SelectMeetingRooms :many
SELECT id, name, created_at FROM meeting_room
`

func (q *Queries) SelectMeetingRooms(ctx context.Context) ([]MeetingRoom, error) {
	rows, err := q.db.Query(ctx, selectMeetingRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MeetingRoom
	for rows.Next() {
		var i MeetingRoom
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :one
SELECT id, email, password, name, role, created_at FROM "user" WHERE id = $1
`

func (q *Queries) SelectUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, email, password, name, role, created_at FROM "user" WHERE email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const selectUserReservations = `-- name: SelectUserReservations :many
SELECT r.id, r.user_id, r.meeting_room_id, r.time_slot_id, r.status, r.reserved_at, mr.id, mr.name, mr.created_at, ts.id, ts.meeting_room_id, ts.start_date, ts.end_date, ts.created_at FROM reservation r
  JOIN meeting_room mr ON mr.id = r.meeting_room_id
  JOIN time_slot ts ON ts.id = r.time_slot_id
WHERE user_id = $1
`

type SelectUserReservationsRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	MeetingRoomID pgtype.UUID        `json:"meeting_room_id"`
	TimeSlotID    pgtype.UUID        `json:"time_slot_id"`
	Status        string             `json:"status"`
	ReservedAt    pgtype.Timestamptz `json:"reserved_at"`
	MeetingRoom   MeetingRoom        `json:"meeting_room"`
	TimeSlot      TimeSlot           `json:"time_slot"`
}

func (q *Queries) SelectUserReservations(ctx context.Context, userID pgtype.UUID) ([]SelectUserReservationsRow, error) {
	rows, err := q.db.Query(ctx, selectUserReservations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUserReservationsRow
	for rows.Next() {
		var i SelectUserReservationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MeetingRoomID,
			&i.TimeSlotID,
			&i.Status,
			&i.ReservedAt,
			&i.MeetingRoom.ID,
			&i.MeetingRoom.Name,
			&i.MeetingRoom.CreatedAt,
			&i.TimeSlot.ID,
			&i.TimeSlot.MeetingRoomID,
			&i.TimeSlot.StartDate,
			&i.TimeSlot.EndDate,
			&i.TimeSlot.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
