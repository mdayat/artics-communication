// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package repository

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

type BulkInsertMeetingRoomParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

type BulkInsertReservationParams struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	MeetingRoomID pgtype.UUID        `json:"meeting_room_id"`
	TimeSlotID    pgtype.UUID        `json:"time_slot_id"`
	Canceled      bool               `json:"canceled"`
	CanceledAt    pgtype.Timestamptz `json:"canceled_at"`
}

type BulkInsertTimeSlotParams struct {
	ID            pgtype.UUID        `json:"id"`
	MeetingRoomID pgtype.UUID        `json:"meeting_room_id"`
	StartDate     pgtype.Timestamptz `json:"start_date"`
	EndDate       pgtype.Timestamptz `json:"end_date"`
}

type BulkInsertUserParams struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Name     string      `json:"name"`
	Role     string      `json:"role"`
}

const cancelReservation = `-- name: CancelReservation :one
UPDATE reservation
SET
  canceled = TRUE
WHERE
  id = $1
RETURNING id, user_id, meeting_room_id, time_slot_id, canceled, canceled_at, reserved_at
`

func (q *Queries) CancelReservation(ctx context.Context, id pgtype.UUID) (Reservation, error) {
	row := q.db.QueryRow(ctx, cancelReservation, id)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MeetingRoomID,
		&i.TimeSlotID,
		&i.Canceled,
		&i.CanceledAt,
		&i.ReservedAt,
	)
	return i, err
}

const cancelUserReservation = `-- name: CancelUserReservation :one
UPDATE reservation
SET
  canceled = TRUE
WHERE
  id = $1
  AND user_id = $2
RETURNING id, user_id, meeting_room_id, time_slot_id, canceled, canceled_at, reserved_at
`

type CancelUserReservationParams struct {
	ID     pgtype.UUID `json:"id"`
	UserID pgtype.UUID `json:"user_id"`
}

func (q *Queries) CancelUserReservation(ctx context.Context, arg CancelUserReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, cancelUserReservation, arg.ID, arg.UserID)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MeetingRoomID,
		&i.TimeSlotID,
		&i.Canceled,
		&i.CanceledAt,
		&i.ReservedAt,
	)
	return i, err
}

const insertReservation = `-- name: InsertReservation :one
INSERT INTO reservation (id, user_id, meeting_room_id, time_slot_id)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, meeting_room_id, time_slot_id, canceled, canceled_at, reserved_at
`

type InsertReservationParams struct {
	ID            pgtype.UUID `json:"id"`
	UserID        pgtype.UUID `json:"user_id"`
	MeetingRoomID pgtype.UUID `json:"meeting_room_id"`
	TimeSlotID    pgtype.UUID `json:"time_slot_id"`
}

func (q *Queries) InsertReservation(ctx context.Context, arg InsertReservationParams) (Reservation, error) {
	row := q.db.QueryRow(ctx, insertReservation,
		arg.ID,
		arg.UserID,
		arg.MeetingRoomID,
		arg.TimeSlotID,
	)
	var i Reservation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MeetingRoomID,
		&i.TimeSlotID,
		&i.Canceled,
		&i.CanceledAt,
		&i.ReservedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO "user" (id, email, password, name, role)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, email, password, name, role, created_at
`

type InsertUserParams struct {
	ID       pgtype.UUID `json:"id"`
	Email    string      `json:"email"`
	Password string      `json:"password"`
	Name     string      `json:"name"`
	Role     string      `json:"role"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.Name,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const selectAvailableMeetingRooms = `-- name: SelectAvailableMeetingRooms :many
SELECT
  mr.id, mr.name, mr.created_at,
  ts.id, ts.meeting_room_id, ts.start_date, ts.end_date, ts.created_at
FROM
  meeting_room mr
JOIN
  time_slot ts ON ts.meeting_room_id = mr.id
WHERE
  NOT EXISTS (
    SELECT 1 FROM reservation r 
    WHERE
      r.meeting_room_id = mr.id 
      AND r.time_slot_id = ts.id 
      AND r.canceled = FALSE
  )
ORDER BY
  mr.name
`

type SelectAvailableMeetingRoomsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	TimeSlot  TimeSlot           `json:"time_slot"`
}

func (q *Queries) SelectAvailableMeetingRooms(ctx context.Context) ([]SelectAvailableMeetingRoomsRow, error) {
	rows, err := q.db.Query(ctx, selectAvailableMeetingRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectAvailableMeetingRoomsRow
	for rows.Next() {
		var i SelectAvailableMeetingRoomsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.TimeSlot.ID,
			&i.TimeSlot.MeetingRoomID,
			&i.TimeSlot.StartDate,
			&i.TimeSlot.EndDate,
			&i.TimeSlot.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectMeetingRooms = `-- name: SelectMeetingRooms :many
SELECT
  mr.id, mr.name, mr.created_at,
  ts.id, ts.meeting_room_id, ts.start_date, ts.end_date, ts.created_at
FROM
  meeting_room mr
JOIN
  time_slot ts ON ts.meeting_room_id = mr.id
ORDER BY
  mr.name
`

type SelectMeetingRoomsRow struct {
	ID        pgtype.UUID        `json:"id"`
	Name      string             `json:"name"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	TimeSlot  TimeSlot           `json:"time_slot"`
}

func (q *Queries) SelectMeetingRooms(ctx context.Context) ([]SelectMeetingRoomsRow, error) {
	rows, err := q.db.Query(ctx, selectMeetingRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectMeetingRoomsRow
	for rows.Next() {
		var i SelectMeetingRoomsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.TimeSlot.ID,
			&i.TimeSlot.MeetingRoomID,
			&i.TimeSlot.StartDate,
			&i.TimeSlot.EndDate,
			&i.TimeSlot.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectReservations = `-- name: SelectReservations :many
SELECT
  r.id, r.user_id, r.meeting_room_id, r.time_slot_id, r.canceled, r.canceled_at, r.reserved_at,
  u.id, u.email, u.password, u.name, u.role, u.created_at,
  mr.id, mr.name, mr.created_at,
  ts.id, ts.meeting_room_id, ts.start_date, ts.end_date, ts.created_at
FROM
  reservation r
JOIN
  "user" u ON u.id = r.user_id
JOIN
  meeting_room mr ON mr.id = r.meeting_room_id
JOIN
  time_slot ts ON ts.id = r.time_slot_id
`

type SelectReservationsRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	MeetingRoomID pgtype.UUID        `json:"meeting_room_id"`
	TimeSlotID    pgtype.UUID        `json:"time_slot_id"`
	Canceled      bool               `json:"canceled"`
	CanceledAt    pgtype.Timestamptz `json:"canceled_at"`
	ReservedAt    pgtype.Timestamptz `json:"reserved_at"`
	User          User               `json:"user"`
	MeetingRoom   MeetingRoom        `json:"meeting_room"`
	TimeSlot      TimeSlot           `json:"time_slot"`
}

func (q *Queries) SelectReservations(ctx context.Context) ([]SelectReservationsRow, error) {
	rows, err := q.db.Query(ctx, selectReservations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectReservationsRow
	for rows.Next() {
		var i SelectReservationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MeetingRoomID,
			&i.TimeSlotID,
			&i.Canceled,
			&i.CanceledAt,
			&i.ReservedAt,
			&i.User.ID,
			&i.User.Email,
			&i.User.Password,
			&i.User.Name,
			&i.User.Role,
			&i.User.CreatedAt,
			&i.MeetingRoom.ID,
			&i.MeetingRoom.Name,
			&i.MeetingRoom.CreatedAt,
			&i.TimeSlot.ID,
			&i.TimeSlot.MeetingRoomID,
			&i.TimeSlot.StartDate,
			&i.TimeSlot.EndDate,
			&i.TimeSlot.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectUser = `-- name: SelectUser :one
SELECT id, email, password, name, role, created_at FROM "user" WHERE id = $1
`

func (q *Queries) SelectUser(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, selectUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const selectUserByEmail = `-- name: SelectUserByEmail :one
SELECT id, email, password, name, role, created_at FROM "user" WHERE email = $1
`

func (q *Queries) SelectUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, selectUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.Name,
		&i.Role,
		&i.CreatedAt,
	)
	return i, err
}

const selectUserReservations = `-- name: SelectUserReservations :many
SELECT
  r.id, r.user_id, r.meeting_room_id, r.time_slot_id, r.canceled, r.canceled_at, r.reserved_at,
  mr.id, mr.name, mr.created_at,
  ts.id, ts.meeting_room_id, ts.start_date, ts.end_date, ts.created_at
FROM
  reservation r
JOIN
  meeting_room mr ON mr.id = r.meeting_room_id
JOIN
  time_slot ts ON ts.id = r.time_slot_id
WHERE
  user_id = $1
`

type SelectUserReservationsRow struct {
	ID            pgtype.UUID        `json:"id"`
	UserID        pgtype.UUID        `json:"user_id"`
	MeetingRoomID pgtype.UUID        `json:"meeting_room_id"`
	TimeSlotID    pgtype.UUID        `json:"time_slot_id"`
	Canceled      bool               `json:"canceled"`
	CanceledAt    pgtype.Timestamptz `json:"canceled_at"`
	ReservedAt    pgtype.Timestamptz `json:"reserved_at"`
	MeetingRoom   MeetingRoom        `json:"meeting_room"`
	TimeSlot      TimeSlot           `json:"time_slot"`
}

func (q *Queries) SelectUserReservations(ctx context.Context, userID pgtype.UUID) ([]SelectUserReservationsRow, error) {
	rows, err := q.db.Query(ctx, selectUserReservations, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectUserReservationsRow
	for rows.Next() {
		var i SelectUserReservationsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MeetingRoomID,
			&i.TimeSlotID,
			&i.Canceled,
			&i.CanceledAt,
			&i.ReservedAt,
			&i.MeetingRoom.ID,
			&i.MeetingRoom.Name,
			&i.MeetingRoom.CreatedAt,
			&i.TimeSlot.ID,
			&i.TimeSlot.MeetingRoomID,
			&i.TimeSlot.StartDate,
			&i.TimeSlot.EndDate,
			&i.TimeSlot.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
